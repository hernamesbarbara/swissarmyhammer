name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust with Cache
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: ${{ matrix.rust }}

      - name: Run tests
        run: cargo test --all-features

      - name: Run integration tests
        run: cargo test --test '*'

      - name: Run property tests
        run: cargo test --test property_tests

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust with Cache
        uses: ./.github/actions/setup-rust-cache
        with:
          components: clippy

      - name: Run clippy
        run: cargo clippy --all-features --all-targets -- -D warnings

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust with Cache
        uses: ./.github/actions/setup-rust-cache
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt -- --check

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust with Cache
        uses: ./.github/actions/setup-rust-cache

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  validate-release:
    name: Validate Release Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust with Cache
        uses: ./.github/actions/setup-rust-cache

      - name: Build release binary
        run: cargo build --release --bin swissarmyhammer

      - name: Check binary exists
        run: |
          ls -lh target/release/swissarmyhammer
          echo "Release binary built successfully"
