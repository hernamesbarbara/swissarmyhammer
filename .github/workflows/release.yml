name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: swissarmyhammer
            asset_name: swissarmyhammer-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: swissarmyhammer
            asset_name: swissarmyhammer-aarch64-apple-darwin
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: swissarmyhammer
            asset_name: swissarmyhammer-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: swissarmyhammer
            asset_name: swissarmyhammer-aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: swissarmyhammer
            asset_name: swissarmyhammer-x86_64-unknown-linux-musl
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: swissarmyhammer.exe
            asset_name: swissarmyhammer-x86_64-pc-windows-msvc.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build binary
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Generate checksums
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cd target/${{ matrix.target }}/release
          sha256sum ${{ matrix.artifact_name }} > ${{ matrix.asset_name }}.sha256
        else
          cd target/${{ matrix.target }}/release
          sha256sum ${{ matrix.artifact_name }} > ${{ matrix.asset_name }}.sha256
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: |
          target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          target/${{ matrix.target }}/release/${{ matrix.asset_name }}.sha256

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --all-features

    - name: Run clippy
      run: cargo clippy --all-features -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check

  release:
    name: Create Release
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Generate release notes
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "# Release ${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Installation" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### macOS" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "# Intel Macs" >> $GITHUB_OUTPUT
        echo "wget https://github.com/\${{ github.repository }}/releases/download/${GITHUB_REF#refs/tags/}/swissarmyhammer-x86_64-apple-darwin" >> $GITHUB_OUTPUT
        echo "chmod +x swissarmyhammer-x86_64-apple-darwin" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "# Apple Silicon Macs" >> $GITHUB_OUTPUT
        echo "wget https://github.com/\${{ github.repository }}/releases/download/${GITHUB_REF#refs/tags/}/swissarmyhammer-aarch64-apple-darwin" >> $GITHUB_OUTPUT
        echo "chmod +x swissarmyhammer-aarch64-apple-darwin" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Linux" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "# x86_64 (glibc)" >> $GITHUB_OUTPUT
        echo "wget https://github.com/\${{ github.repository }}/releases/download/${GITHUB_REF#refs/tags/}/swissarmyhammer-x86_64-unknown-linux-gnu" >> $GITHUB_OUTPUT
        echo "chmod +x swissarmyhammer-x86_64-unknown-linux-gnu" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "# x86_64 (musl, static)" >> $GITHUB_OUTPUT
        echo "wget https://github.com/\${{ github.repository }}/releases/download/${GITHUB_REF#refs/tags/}/swissarmyhammer-x86_64-unknown-linux-musl" >> $GITHUB_OUTPUT
        echo "chmod +x swissarmyhammer-x86_64-unknown-linux-musl" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Windows" >> $GITHUB_OUTPUT
        echo "\`\`\`powershell" >> $GITHUB_OUTPUT
        echo "Invoke-WebRequest https://github.com/\${{ github.repository }}/releases/download/${GITHUB_REF#refs/tags/}/swissarmyhammer-x86_64-pc-windows-msvc.exe -OutFile swissarmyhammer.exe" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: |
          artifacts/*/swissarmyhammer*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}