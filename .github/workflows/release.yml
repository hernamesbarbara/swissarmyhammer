name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v0.1.0)"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          body: |
            ## SwissArmyHammer ${{ env.VERSION }}

            ### Installation

            #### Quick Install (Linux/macOS)
            ```bash
            curl -fsSL https://raw.githubusercontent.com/swissarmyhammer/swissarmyhammer/main/install.sh | sh
            ```

            #### Cargo Install
            ```bash
            cargo install swissarmyhammer-cli
            ```
  build:
    name: Build Release Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: swissarmyhammer-linux-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: swissarmyhammer-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: swissarmyhammer-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: swissarmyhammer-windows-x86_64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust with Cache
        uses: ./.github/actions/setup-rust-cache
        with:
          target: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --bin swissarmyhammer

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/swissarmyhammer release/
          chmod +x release/swissarmyhammer
          tar -czf ${{ matrix.name }}.tar.gz -C release swissarmyhammer

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release
          cp target/${{ matrix.target }}/release/swissarmyhammer.exe release/
          Compress-Archive -Path release/swissarmyhammer.exe -DestinationPath ${{ matrix.name }}.zip

      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.tar.gz
          asset_name: ${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.zip
          asset_name: ${{ matrix.name }}.zip
          asset_content_type: application/zip

  publish-crates:
    name: Publish to crates.io
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust with Cache
        uses: ./.github/actions/setup-rust-cache

      - name: Publish swissarmyhammer library
        run: cargo publish --package swissarmyhammer --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Wait for library to be available
        run: sleep 30

      - name: Publish swissarmyhammer-cli
        run: cargo publish --package swissarmyhammer-cli --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
