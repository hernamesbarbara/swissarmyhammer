name: LlamaAgent Integration Tests

on:
  push:
    branches: [ main, develop, issue/llama_* ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Test with Claude executor only (default CI configuration)
  test-claude-only:
    name: Test Claude Executor Only
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run Claude-only tests
      run: cargo test --release
      env:
        SAH_TEST_CLAUDE: true
        SAH_TEST_LLAMA: false
        SAH_TEST_TIMEOUT: 60
        RUST_LOG: info

    - name: Run Claude-specific integration tests
      run: cargo test --release --test llama_agent_integration
      env:
        SAH_TEST_CLAUDE: true
        SAH_TEST_LLAMA: false

  # Test with LlamaAgent mock (no actual model loading)
  test-llama-mock:
    name: Test LlamaAgent Mock
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-llama-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run LlamaAgent mock tests
      run: cargo test --release llama_agent
      env:
        SAH_TEST_CLAUDE: false
        SAH_TEST_LLAMA: true
        SAH_TEST_TIMEOUT: 30
        RUST_LOG: warn

    - name: Run load tests with mocked executors
      run: cargo test --release --test load_tests
      env:
        SAH_TEST_CLAUDE: false
        SAH_TEST_LLAMA: true
        SAH_TEST_MAX_CONCURRENT: 3

  # Test both executors together (when both are configured)  
  test-both-executors:
    name: Test Both Executors
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-both-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run cross-executor compatibility tests
      run: cargo test --release --test e2e_validation
      env:
        SAH_TEST_CLAUDE: true
        SAH_TEST_LLAMA: true
        SAH_TEST_TIMEOUT: 45
        SAH_TEST_MAX_CONCURRENT: 2

  # Configuration matrix testing
  test-config-matrix:
    name: Test Configuration Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          - { claude: true, llama: false, timeout: 30 }
          - { claude: false, llama: true, timeout: 20 }
          - { claude: true, llama: true, timeout: 60 }
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-matrix-${{ matrix.config.claude }}-${{ matrix.config.llama }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Run test configuration tests
      run: cargo test --release --test llama_test_config
      env:
        SAH_TEST_CLAUDE: ${{ matrix.config.claude }}
        SAH_TEST_LLAMA: ${{ matrix.config.llama }}
        SAH_TEST_TIMEOUT: ${{ matrix.config.timeout }}

  # Performance benchmarks (only on main branch)
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run performance benchmarks
      run: |
        cargo bench --bench executor_performance -- --output-format json --save-baseline main
      env:
        SAH_TEST_CLAUDE: true
        SAH_TEST_LLAMA: true
        
    - name: Archive benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          target/criterion/
          **/*.json
        retention-days: 30

  # Code quality checks
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run clippy on test code
      run: cargo clippy --tests -- -D warnings

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  # Documentation and coverage
  docs-and-coverage:
    name: Documentation and Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate documentation
      run: cargo doc --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: "-D warnings"

    - name: Run doc tests
      run: cargo test --doc

    - name: Generate coverage report
      run: |
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      env:
        SAH_TEST_CLAUDE: true
        SAH_TEST_LLAMA: false # Disable LlamaAgent for coverage to avoid model loading

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: false

  # Test summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-claude-only, test-llama-mock, test-both-executors, test-config-matrix, lint-and-format]
    if: always()
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Claude Only | ${{ needs.test-claude-only.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| LlamaAgent Mock | ${{ needs.test-llama-mock.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Both Executors | ${{ needs.test-both-executors.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Config Matrix | ${{ needs.test-config-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lint/Format | ${{ needs.lint-and-format.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall result
        if [[ "${{ needs.test-claude-only.result }}" == "success" && \
              "${{ needs.lint-and-format.result }}" == "success" ]]; then
          echo "✅ **Core tests passed!** The LlamaAgent integration maintains compatibility with existing Claude Code functionality." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some tests failed.** Please review the failing jobs above." >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add environment info
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Environment Variables" >> $GITHUB_STEP_SUMMARY
        echo "- \`SAH_TEST_CLAUDE\`: Enable Claude executor tests" >> $GITHUB_STEP_SUMMARY
        echo "- \`SAH_TEST_LLAMA\`: Enable LlamaAgent executor tests" >> $GITHUB_STEP_SUMMARY
        echo "- \`SAH_TEST_TIMEOUT\`: Test timeout in seconds" >> $GITHUB_STEP_SUMMARY
        echo "- \`SAH_TEST_MAX_CONCURRENT\`: Maximum concurrent tests" >> $GITHUB_STEP_SUMMARY

    - name: Failure Analysis
      if: ${{ needs.test-claude-only.result == 'failure' || needs.test-llama-mock.result == 'failure' || needs.test-both-executors.result == 'failure' }}
      run: |
        echo "## Failure Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following test suites failed:" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test-claude-only.result }}" == "failure" ]]; then
          echo "- **Claude Only Tests**: This indicates an issue with core executor functionality" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.test-llama-mock.result }}" == "failure" ]]; then
          echo "- **LlamaAgent Mock Tests**: This indicates an issue with LlamaAgent integration" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.test-both-executors.result }}" == "failure" ]]; then
          echo "- **Both Executors Tests**: This indicates a cross-executor compatibility issue" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review the failing job logs for specific error details" >> $GITHUB_STEP_SUMMARY
        echo "2. Run tests locally with the same environment variables" >> $GITHUB_STEP_SUMMARY
        echo "3. Check for missing dependencies or configuration issues" >> $GITHUB_STEP_SUMMARY